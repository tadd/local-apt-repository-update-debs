#!/bin/bash -eu

DEBS=${DEBS:-/srv/local-apt-repository}
CONFS=${CONFS:-/etc/local-apt-repository-fetch-deb}

dumpvar() {
    declare -p "$1" | sed -r 's/^[^=]*=\(?//; s/\)?$//'
}

pp() {
    echo -n "$1: " >&2
    dumpvar $1 >&2
}

extract_array() {
    local -n lret=$1
    local -n s=$2
    local -r assign=${3-}
    eval "lret${assign}=(${s})"
}

github_expand_conf() {
    local -nr rw=$1
    local repos=${rw[1]} pkg=${rw[2]-}
    github_expand_repos repos
    repo="$ret"
    github_expand_pkg pkg repos
    pkg="$ret"
    ret="[repos]=$repos [pkg]=$pkg"
}

github_expand_repos() {
    local -n repo=$1
    ret=$repo
    if [[ $repo == */* ]]; then
        return
    fi
    ret=$repo/$repo
}

github_expand_pkg() {
    local -nr pk=$1 repo=$2
    if [[ $pk == *.deb ]]; then
        return
    fi
    if [[ -z "$pk" ]]; then
        pk=${repo#*/}
    fi
    ret="${pk}_%v_%a.deb"
}

expand_conf() {
    local -r line="$(echo "$1" | sed 's/ *#.*//')"
    local -a row=(${line//:/ })
    local -r proto=${row[0]}
    local -A ent=([proto]=$proto) tmp=()
    case $proto in
        https|http)
            ent+=([url]="$line")
            ;;
        github)
            github_expand_conf row
            extract_array ent ret +
            ;;
        *)
            echo unknown protocol: "'$proto'" in "$line" >&2
            exit 2
            ;;
    esac
    ret="$(dumpvar ent)"
}

load_conf() {
    local -r path=$CONFS/sources

    local line
    local -a a=()
    while read -r line; do
        expand_conf "$line"
        a+=("$(dumpvar ret)")
    done < $path
    ret="$(dumpvar a)"
}

fetch_direct() {
    local -r url="$1"
    pushd "$DEBS" >/dev/null
    if (( debug )); then
        echo "$url" >&2
        popd >/dev/null
        return
    fi
    $wget --content-disposition -N "$url"
    popd >/dev/null
}

github_latest_version() {
    local -r base="$1"
    ret=$($wget --spider -S "$base" 2>&1|sed -r 's|  Location: .*/v?([^/]+)$|\1|p;d')
}

github_url_base() {
    local -r repos="$1"
    ret="https://github.com/$repos/releases/latest/download"
}

github_format_pkg() {
    local -r pk=$1 v=$2
    ret=$(echo $pk | sed "s/%a/$arch/; s/%v/$v/")
}

github_url() {
    local -nr e=$2
    local -r repos="${e[repos]}"
    local base ver pkg
    github_url_base base $repos
    github_latest_version ver "$base"
    github_format_pkg pkg "${e[pkg]}" $ver
    ret="$base/$pkg"
}


fetch_github() {
    local -nr ent=$1
    local url
    github_url url ent
    fetch_direct "$url"
}

fetch() {
    local -rn cnf=$1
    local -A entry
    local buf
    for buf in "${cnf[@]}"; do
        extract_array entry buf
        pp buf
        pp entry
        case ${entry[proto]} in
            https|http)
                fetch_direct "${entry[url]}" #&
                ;;
            *)
                fetch_${entry[proto]} entry #&
                ;;
        esac
    done
    wait
}

main() {
    # globals
    local -r arch=$(dpkg --print-architecture)
    local -r wget='wget --no-verbose'
    local -r progname=$(basename $0)
    local -r debug=1
    local ret

    local -a conf
    load_conf conf
    extract_array conf ret
    fetch conf
}

main "$@"
